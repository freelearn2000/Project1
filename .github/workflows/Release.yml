name: Release-Deploy

on:
  workflow_run:
     workflows: ["Nodeapp", "Reactapp"]
     types: [completed]
     branches: [master]
     
jobs:
  release:
    name: Release-Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
   
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Download from React Artifact [React]
      id: download_react
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: Reactapp.yml
        name: React_build
        path: ./reactapp/build
      # skip_unpack: true
     
    - name: Conditions for React Artifact Download failure [React]
      id: build_react
      if: ${{ always() &&  steps.download_react.outcome == 'failure' }}
      run: npm run build
      working-directory: reactapp
        
    - name: Create Issue (If Build fail) [React]
      if: ${{ always() && steps.build_react.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Build failed
      with:
        assignees: ${{github.actor}}
        filename: .github/BUILD_TEMPLATE.md
        
    - name: Download from Node Artifact [Node]
      id: download_node
      if: ${{ always() }}
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: Nodeapp.yml
        name: Node_build
        path: ./nodeapp/build
        skip_unpack: true

    - name: Conditions for Node Artifact Download failure [Node]
      id: build_node
      if: ${{ always() && steps.download_node.outcome == 'failure' }}
      run: npm run build:prod
      working-directory: nodeapp
  
    - name: Create Issue (If Build fail) [Node]
      if: ${{ always() && steps.build_node.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Build failed
      with:
        assignees: ${{github.actor}}
        filename: .github/BUILD_TEMPLATE.md     
         
    - name: Login to Azure(using Service Principal) for Production server [Node]
      id: login
      run: echo "login"
      # uses: azure/login@v1
      # with:
      #   working-directory: nodeapp
      #   creds: ${{ secrets.AZURE_CREDENTIALS }}          
   
    - name: Deploy to Azure App Service for Production server [Node]
      id: deploy-node
      if: ${{ always() && steps.login.outcome == 'success' }}
      run: echo "deploy"
      # uses: azure/webapps-deploy@v2
      # with:
      #   app-name: ${{ secrets.AZURE_APPSERVICE_NAME }}
      #   package: ./nodeapp/build

    #- name: Configure Azure App Service [Node]
    #  id: settings
    #  uses: azure/appservice-settings@v1
    #  with:
    #    app-name: 'infra-node-sample'
    #    app-settings-json: '${{ secrets.AZURE_APP_SETTINGS }}'

    - name: Deploy to Azure blob storage for Production Server (Todo:Use Service Principal) [React]
      id: deploy-react
      run: echo "deploy"
      # uses: azure/CLI@v1
      # with:
      #     azcliversion: 2.0.72
      #     inlineScript: |
      #      az storage blob upload-batch --destination ${{ secrets.AZURE_BLOBNAME }} --source ./reactapp/build --account-name ${{ secrets.AZURE_STORAGENAME }}  --account-key  ${{ secrets.AZURE_STORAGEKEY }}

    - name: Create Issue (If Deploy fail) [React & Node]
      if: ${{ always() && (steps.login.outcome == 'failure' || steps.deploy-node.outcome == 'failure' || steps.deploy-react.outcome == 'failure' ) }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Deploy failed
      with:
        assignees: ${{github.actor}}
        filename: .github/DEPLOY_TEMPLATE.md       

    - name: Create a Release [React & Node]
      run: npx semantic-release
      env:
         GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
