name: Reactapp

on:
  pull_request:
   branches: [develop, master]
   paths: [reactapp/src/**]
   types: [opened, reopened]
  push:
   branches: [develop, master]
   paths: [reactapp/src/**]

env:
  NODE_VERSION: '16.x'

jobs:

  build:
    name: React App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: reactapp
 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
       
    - name: Install App dependencies
      run: npm ci
      
    - name: Code analysis
      id: lint
      run: npm run lint
      
    - name: Create Issue (If lint Fail)
      if: ${{ always() &&  steps.lint.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: React App lint Failed
          LINT_REPORT_URL: https://freelearn2000.github.io/Project1/reactapp/reports/lint-results.html
      with:
        assignees: ${{github.actor}}
        filename: .github/LINT_TEMPLATE.md
      
    - name: Run Unit Tests
      id: test
      run: |
           npm test
           npm run test:report
      env:
        CI: true
        
    - name: Run Tests Coverage
      id: coverage
      if: always()
      run: npm run coverage:report
      env:
        CI: true

    - name: Copy Unit Test Report/Coverage/Lint to GitHub Page
      if: ${{ always() && (steps.test.outcome == 'failure' || steps.coverage.outcome == 'failure' || steps.lint.outcome == 'failure' ) }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.SEMANTIC_TOKEN1 }}
        publish_dir: ./reactapp/reports
        publish_branch: gh-pages
        destination_dir: ./reactapp
    
    - name: Create Issue (If Test/Coverage Fail)
      if: ${{ always() && (steps.test.outcome == 'failure' || steps.coverage.outcome == 'failure' ) }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: React App Tests/Coverage Failed
          TEST_REPORT_URL: https://freelearn2000.github.io/Project1/reactapp/index.html)
          COVERAGE_REPORT_URL: https://freelearn2000.github.io/Project1/reactapp/coverage/lcov-report/index.html
      with:
        assignees: ${{github.actor}}
        filename: .github/TESTCOVERAGE_TEMPLATE.md
        
    - name: Build project
      id: build
      if: ${{ always() && (steps.test.outcome == 'success' ) }}
      run: npm run build
        
    - name: Create Issue (If Build fail)
      if: ${{ always() && steps.build.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Build failed
      with:
        assignees: ${{github.actor}}
        filename: .github/BUILD_TEMPLATE.md
        
    - name: Upload React Build folder as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: React_build
        path: ./reactapp/build
        
  deploy-staging:
    needs: [build]
    if: ${{ github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    environment: staging
    #if: ${{ needs.common.outputs.branch == 'develop'}}
    defaults:
      run:
        working-directory: reactapp
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Download from artifact
      uses: actions/download-artifact@v3
      with:
         name: React_build
         path: ./reactapp/build
        
    - name: Deploy to Azure blob storage for Staging Server
      id: deploy
      uses: azure/CLI@v1
      with:
        azcliversion: 2.0.72
        inlineScript: |
          az storage blob upload-batch --destination ${{ secrets.AZURE_BLOBNAME }} --source ./reactapp/build --account-name ${{ secrets.AZURE_STORAGENAME }}  --account-key  ${{ secrets.AZURE_STORAGEKEY }}
  
    - name: Slack Message
      if: always()
      uses: ravsamhq/notify-slack-action@v1
      with:
       status: ${{ job.status }} 
       notification_title: '{" Successfully deployed to Staging Server(Azure AppService)"}'
       message_format: ' {status_message} in <{repo_url}|{repo}>'
       footer: 'Linked to Repo <{repo_url}|{repo}>'
        
    - name: Create Issue (If Deploy fail)
      if: ${{ always() && steps.deploy.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Deploy failed
      with:
        assignees: ${{github.actor}}
        filename: .github/DEPLOY_TEMPLATE.md
        
#   deploy-production:
#     needs: [build]
#     if: ${{ github.ref == 'refs/heads/master' }}
#     runs-on: ubuntu-latest
#     environment: production
#     #if: ${{ needs.common.outputs.branch == 'master'}}
#     defaults:
#       run:
#         working-directory: reactapp
      
#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2
      
#     - name: Download from artifact
#       uses: actions/download-artifact@v3
#       with:
#          name: React_build
#          path: ./reactapp/build
         
#     - name: Deploy to Azure blob storage for Production Server
#       id: deploy
#       run: echo "Deploy to azure blob storage"
#       uses: azure/CLI@v1
#       with:
#       azcliversion: 2.0.72
#        inlineScript: |
#          az storage blob upload-batch --destination ${{ secrets.AZURE_BLOBNAME }} --source ./reactapp/build --account-name ${{ secrets.AZURE_STORAGENAME }}  --account-key  ${{ secrets.AZURE_STORAGEKEY }}

#     - name: Create Issue (If Deploy fail)
#       if: ${{ always() && steps.deploy.outcome == 'failure' }}
#       uses: JasonEtco/create-an-issue@v2
#       env:
#           GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
#           TITLE: Deploy failed
#       with:
#         assignees: ${{github.actor}}
#         filename: .github/DEPLOY_TEMPLATE.md
   
